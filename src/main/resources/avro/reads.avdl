@namespace("org.ga4gh")

/**
 This file defines the objects used to represent a hierarchy of reads and alignments:
    GAReadGroupSet >--< GAReadGroup --< fragment --< read --< alignment --< linear alignment
 
 * A GAReadGroupSet is a logical collection of GAReadGroup's.
 * A GAReadGroup is all the data that’s processed the same way by the sequencer.
   There are typically 1-10 GAReadGroup's in a GAReadGroupSet.
 * A *fragment* is a single stretch of a DNA molecule. There are typically
   millions of fragments in a GAReadGroup. A fragment has a name (QNAME in BAM
   spec), a length (TLEN in BAM spec), and an array of reads.
 * A *read* is a contiguous sequence of bases. There are typically only one or
   two reads in a fragment. If there are two reads, they’re known as a mate pair.
   A read has an array of base values, an array of base qualities, and alignment
   information.
 * An *alignment* is the way alignment software maps a read to a reference.
   There’s one primary alignment, and can be one or more secondary or
   supplimentary alignments.  Secondary alignments represent alternate possible
   mappings. Supplimentary alignments represent linear alignments that are subsets
   of a chimeric alignment.
 * A *linear alignment* maps a string of bases to a reference using a single
   CIGAR string. There’s one representative alignment, and can be one or more
   supplementary alignments. Supplementary alignments represent chimeric reads.
 * A GAReadAlignment object is a flattened representation of the bottom layers
   of this hierarchy. There's exactly one such object per *linear alignment*.
   The object contains alignment info, plus fragment and read info for easy access.
 */
protocol GAReads {

import idl "common.avdl";

record GAReference {
  /** The reference ID. Unique within the repository. */
  string id;

  /** The bases that make up this reference. */
  string sequence;

  /** The length of this reference sequence. */
  long length;

  /**
    MD5 of the upper-case sequence excluding all whitespace characters
    (as SQ:M5 in SAM).
  */
  string md5checksum;

  /**
    The description of this reference. (e.g. '22') Also see the
    `names` field on the parent `GAReferenceSet`.
  */
  union { null, string } description = null;
  
  /**
    The URI from which the sequence was obtained, if not given in the
    containing `GAReferenceSet`.
    Specifies a FASTA format file/string with one name, sequence pair.
  */
  union { null, string } sourceURI = null;

  /** 
    The accession from which the sequence was obtained, if not given in the
    containing `GAReferenceSet`.
    In INSDC (GenBank/ENA/DDBJ) with version number as `GCF_000001405.26`.
  */
  union { null, string } sourceAccession = null;
  
  /** 
    A sequence X is said to be derived from source sequence Y, if X and Y
    are of the same length and the per-base sequence divergence at A/C/G/T bases
    is sufficiently small. Two sequences derived from the same official
    sequence share the same coordinates and annotations, and
    can be replaced with the official sequence for certain use cases.
  */
  boolean isDerived = false;

  /**
    The `sourceDivergence` is the fraction of non-indel bases that do not match the 
    reference this record was derived from.
  */
  union { null, float } sourceDivergence = null;

  /** 
    ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human)
    If not present, use the `ncbiTaxonId` from the containing
    reference set(s).
  */
  union { null, int } ncbiTaxonId = null;
}

record GAReferenceSet {
  /** The reference set ID. Unique in the repository. */
  string id;

  // Keep names and lengths of sequences here, as in a BAM header.
  // Actual sequences can be retrieved from ids.
  // This means we can process read alignments without fetching an
  // entire genome's worth of sequences.
 
  /** The names of the sequences, as used in MappingPosition. */
  array<string> names = [];
 
  /** The corresponding lengths of the sequences. */
  array<long> lengths = [];
 
  /** The corresponding IDs for the sequences themselves. */
  array<string> sequenceIds = [];
 
  /**
    MD5 of the concatenation of { name, literal sequence } in array order,
    all strings 0-terminated.
  */
  string md5checksum;

  /**
    ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human) 
    `ncbiTaxonId` can be overridden for specific contained 
    `GAReference` records,
    e.g. for EBV in a human reference genome
  */
  union { null, int } ncbiTaxonId = null;

  /** Optional free text description of this reference set. */
  union { null, string } description = null; 
 
  // next information about the source of the sequences

  /** Public id of this reference set, such as `GRCh37`. */
  union { null, string } assemblyId = null;

  /**
    Specifies a FASTA format file/string.
    Can be overriden by the `sourceURI` field in a specific `GAReference`.
  */
  union { null, string } sourceURI = null;

  /**
   In INSDC (GenBank/ENA/DDBJ), ideally with version number.
   Can be overriden by the `sourceAccession` field in a specific
   `GAReference`.
  */
  union { null, string } sourceAccession = null;
  
  /** 
    A reference set may be derived from a source if it contains
    additional sequences, or some of the sequences within it are derived
    (see the definition of `isDerived` in `GAReference`).
  */
  boolean isDerived = false;
}

record GAProgram {
  /** The command line used to run this program. */
  union { null, string } commandLine = null;

  /** The user specified ID of the program. */
  union { null, string } id = null;

  /** The name of the program. */
  union { null, string } name = null;

  /** The ID of the program run before this one. */
  union { null, string } prevProgramId = null;

  /** The version of the program run. */
  union { null, string } version = null;
}

record GADataset {
  /** The dataset ID. */
  string id;

  /** The dataset description. */
  union { null, string } description = null;
}

record GAReadGroup {

  /** The read group ID. */
  string id;

  /** The ID of the dataset this read group belongs to. */
  union { null, string } datasetId = null;

  /** The read group name. */
  union { null, string } name = null;

  /** The read group description. */
  union { null, string } description = null;

  /** The sample this read group's data was generated from. */
  union { null, string } sample;

  /** The library used to generate this read group. */
  union { null, string } library = null;

  /** The platform unit used to generate this read group. */
  union { null, string } platformUnit = null;

  /** The predicted insert size of this read group. */
  union { null, int } predictedInsertSize = null;

  /** The sequencing center used to generate this read group. */
  union { null, string } sequencingCenter;

  /** The sequencing technology used to generate this read group. */
  union { null, string } sequencingTechnology;

  /** The date this read group was created. */
  union { null, long } created = null;

  /** The number of reads in this read group. */
  union { null, long } readCount = null;

  /** The programs used to generate this read group. */
  array<GAProgram> programs = [];

  /**
    The reference set the reads in this read group are aligned to.
    Required if there are any read alignments.
  */
  union {null, string } referenceSetId = null;

  /**
    A map of additional read group information. In JSON, this looks like:
    `info: {key1: value1, key2: value2}`
  */
  array<GAKeyValue> info = [];
}

record GAReadGroupSet {
  /** The read group set ID. */
  string id;

  /** The ID of the dataset this read group set belongs to. */
  union { null, string } datasetId = null;

  /** The read group set name. */
  union { null, string } name = null;

  /** The read groups in this set. */
  array<GAReadGroup> readGroups = [];
  
  // NB: we require that all readgroups in the set are mapped to the same
  // referenceSet.
}

/** A linear alignment can be represented by one CIGAR string. */
record GALinearAlignment {
    /** The position of this alignment. */
    GAPosition position;

    /**
      The mapping quality of this alignment. Represents how likely
      the read maps to this position as opposed to other locations.
    */
    union { null, int } mappingQuality = null;

    /**
      Represents the local alignment of this sequence (alignment matches, indels, etc) 
      versus the reference. 
    */
    array<GACigarUnit> cigar = [];
}

/**
  Each read alignment describes a linear alignment with additional information
  about the fragment and the read. A read alignment object is equivalent to a
  line in a SAM file.
*/
record GAReadAlignment {
  
    /** 
      The read alignment ID. This ID is unique within the read group this 
      alignment belongs to. This field may not be provided by all backends.
      Its intended use is to make caching and UI display easier for 
      genome browsers and other light weight clients.
    */
    union { null, string } id;

    /**
      The ID of the read group this read belongs to.
      (Every read must belong to exactly one read group.)
    */
    string readGroupId;

    // fragment attributes

    /** The fragment name. Equivalent to QNAME (query template name) in SAM.*/
    string fragmentName;

    /**
      The orientation and the distance between reads from the fragment are
      consistent with the sequencing protocol (extension to SAM flag 0x2)
    */
    union { null, boolean } properPlacement = false;

    /** The fragment is a PCR or optical duplicate (SAM flag 0x400) */
    union { null, boolean } duplicateFragment = false;

    /** The number of reads in the fragment (extension to SAM flag 0x1) */
    union { null, int } numberReads = null;

    /** The observed length of the fragment, equivalent to TLEN in SAM. */
    union { null, int } fragmentLength = null;

    // read attributes

    /**
      The read number in sequencing. 0-based and less than numberReads. This field
      replaces SAM flag 0x40 and 0x80.
    */
    union { null, int } readNumber = null;

    /** SAM flag 0x200 */
    union { null, boolean } failedVendorQualityChecks = false;

    /**
      The linear alignment for this alignment record. This field will be
      null if the read is unmapped.
    */
    union { null, GALinearAlignment } alignment = null;

    /**
      Whether this alignment is secondary. Equivalent to SAM flag 0x100.
      A secondary alignment represents an alternative to the primary alignment
      for this read. Aligners may return secondary alignments if a read can map
      ambiguously to multiple coordinates in the genome.
    */
    union { null, boolean } secondaryAlignment = false;
    
    /**
      Whether this alignment is supplementary. Equivalent to SAM flag 0x800.
      Supplementary alignments are used in the representation of a chimeric
      alignment. In a chimeric alignment, a read is split into multiple
      linear alignments that map to different reference contigs. The first
      linear alignment in the read will be designated as the primary alignment;
      the remaining linear alignments will be designated as supplementary alignments.
      These alignments may have different mapping quality scores.
      
      In each linear alignment in a chimeric alignment, the read will be hard clipped.
      The `alignedSequence` and `alignedQuality` fields in the alignment record will
      only represent the bases for its respective linear alignment.
    */
    union { null, boolean } supplementaryAlignment = false;

    /**
      The bases of the read sequence contained in this alignment record.
      `alignedSequence` and `alignedQuality` may be shorter than the full read sequence
      and quality. This will occur if the alignment is part of a chimeric alignment,
      or if the read was trimmed. When this occurs, the CIGAR for this read will
      begin/end with a hard clip operator that will indicate the length of the excised sequence.
    */
    union { null, string } alignedSequence = null;

    /**
      The quality of the read sequence contained in this alignment record.
      `alignedSequence` and `alignedQuality` may be shorter than the full read sequence
      and quality. This will occur if the alignment is part of a chimeric alignment,
      or if the read was trimmed. When this occurs, the CIGAR for this read will
      begin/end with a hard clip operator that will indicate the length of the excised sequence.
    */
    array<int> alignedQuality = [];

    /**
      The mapping of the primary alignment of the `(readNumber+1)%numberReads`
      read in the fragment. It replaces mate position and mate strand in SAM.
    */
    union { null, GAPosition } nextMatePosition = null;

    /**
      A map of additional read alignment information. In JSON, this looks like:
      `info: {key1: value1, key2: value2}`
    */
    array<GAKeyValue> info = [];
}

}
